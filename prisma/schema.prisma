// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model EntityType {
  id_entity_type   Int      @id @default(autoincrement())
  name_entity_type String   @unique @db.VarChar(100)
  entities         Entity[]
}

model Entity {
  id_entity      Int        @id @default(autoincrement())
  name_entity    String
  id_entity_type Int
  entity_type    EntityType @relation(fields: [id_entity_type], references: [id_entity_type])

  // Relaciones de transacciones
  transactions_as_old_owner Transaction[] @relation("OldOwner")
  transactions_as_new_owner Transaction[] @relation("NewOwner")
  transaction_entities      TransactionEntity[]

  // Relaciones con otras entidades
  items     Item[]
  resources Resource[]
  branches  Branch[]
  areas     Area[]
  users     User[]

  // Relaciones muchos a muchos
  entity_areas     EntityArea[]
  entity_users     EntityUser[]
  entity_branches  EntityBranch[]
  entity_items     EntityItem[]
  entity_resources EntityResource[]
}

model Transaction {
  id_transaction   Int       @id @default(autoincrement())
  date_transaction DateTime  @default(now())
  id_old_owner     Int
  id_new_owner     Int
  amount           Decimal?  @db.Decimal(4, 0)

  old_owner Entity @relation("OldOwner", fields: [id_old_owner], references: [id_entity])
  new_owner Entity @relation("NewOwner", fields: [id_new_owner], references: [id_entity])

  transaction_entities TransactionEntity[]
}

model TransactionEntity {
  id_transaction Int
  id_entity      Int

  transaction Transaction @relation(fields: [id_transaction], references: [id_transaction])
  entity      Entity      @relation(fields: [id_entity], references: [id_entity])

  @@id([id_transaction, id_entity])
}

model ItemType {
  id_item_type Int    @id @default(autoincrement())
  name         String @unique @db.VarChar(100)
  items        Item[]
}

model Item {
  id_item      String   @id
  id_item_type Int
  name_item    String   @db.VarChar(255)
  description  String?
  provider     String
  id_entity    Int

  item_type ItemType @relation(fields: [id_item_type], references: [id_item_type])
  entity    Entity   @relation(fields: [id_entity], references: [id_entity])

  entity_items EntityItem[]
}

model Resource {
  id_resource String  @id
  measure     String? @db.VarChar(100)
  currency    String? @db.VarChar(4)
  description String?
  id_entity   Int

  entity Entity @relation(fields: [id_entity], references: [id_entity])

  entity_resources EntityResource[]
}

model Branch {
  id_branch String  @id
  city      String? @db.VarChar(100)
  phone     String? @db.VarChar(20)
  state     Boolean
  id_entity Int

  entity Entity @relation(fields: [id_entity], references: [id_entity])

  areas           Area[]
  entity_branches EntityBranch[]
}

model Area {
  id_area         String  @id
  id_pattern_area String?
  id_branch       String
  phone           String? @db.VarChar(20)
  description     String?
  state           Boolean
  id_entity       Int

  entity        Entity  @relation(fields: [id_entity], references: [id_entity])
  pattern_area  Area?   @relation("AreaPattern", fields: [id_pattern_area], references: [id_area])
  child_areas   Area[]  @relation("AreaPattern")
  branch        Branch  @relation(fields: [id_branch], references: [id_branch])

  entity_areas EntityArea[]
}

model UserRol {
  id_user_rol   Int    @id @default(autoincrement())
  name_user_rol String @unique @db.VarChar(100)
  users         User[]
}

model User {
  id_user     String  @id
  id_user_rol Int
  password    String  @db.VarChar(100)
  email       String? @unique @db.VarChar(255)
  id_entity   Int

  user_rol UserRol @relation(fields: [id_user_rol], references: [id_user_rol])
  entity   Entity  @relation(fields: [id_entity], references: [id_entity])

  entity_users EntityUser[]
}

// Tablas de relaci√≥n muchos a muchos
model EntityArea {
  id_entity Int
  id_area   String

  entity Entity @relation(fields: [id_entity], references: [id_entity])
  area   Area   @relation(fields: [id_area], references: [id_area])

  @@id([id_entity, id_area])
}

model EntityUser {
  id_entity Int
  id_user   String

  entity Entity @relation(fields: [id_entity], references: [id_entity])
  user   User   @relation(fields: [id_user], references: [id_user])

  @@id([id_entity, id_user])
}

model EntityBranch {
  id_entity Int
  id_branch String

  entity Entity @relation(fields: [id_entity], references: [id_entity])
  branch Branch @relation(fields: [id_branch], references: [id_branch])

  @@id([id_entity, id_branch])
}

model EntityItem {
  id_entity Int
  id_item   String

  entity Entity @relation(fields: [id_entity], references: [id_entity])
  item   Item   @relation(fields: [id_item], references: [id_item])

  @@id([id_entity, id_item])
}

model EntityResource {
  id_entity   Int
  id_resource String

  entity   Entity   @relation(fields: [id_entity], references: [id_entity])
  resource Resource @relation(fields: [id_resource], references: [id_resource])

  @@id([id_entity, id_resource])
}